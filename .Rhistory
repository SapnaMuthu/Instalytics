overflow: auto;
max-height: calc(70vh - 100px);
}
"),
tags$style("
.shiny-box1 {
overflow-y: auto;
max-height: calc(80vh - 100px);
}
")
),
setBackgroundImage(
src = "https://lotofcolor.com/wp-content/uploads/2020/11/thumbnail-3.png",
shinydashboard = TRUE
),
tabItems(
# First tab content
tabItem(
tabName = "username",
div(
fluidRow(
column(12, align = "center",
withSpinner(plotOutput("logo")),
title = "Inputs", background = "black",
textInput("text", "Enter the Username:"),
actionButton("submit_name", "Analyze"),
useShinyalert(), # Enable shinyalert library
)),
style = "display: flex; justify-content: center; align-items: center; height: 80vh; color:white;"
)
),
tabItem(tabName = "dashboard",
mainPanel(
tabsetPanel(
id = "tabset1",
tabPanel(title = "Profile Trends",
selectInput("chart", label = tags$span(style="color: white;","Select your chart:"),
choices = c("Area Chart", "Line Chart")),
withSpinner(plotlyOutput("plot"))),
tabPanel(title = "WordCloud",
tags$div(
id = "center-container",
style = "display: flex; justify-content: center; align-items: center;",
withSpinner(htmlOutput("wordcloud"))
),
withSpinner(htmlOutput("wordtext"))
),
tabPanel("Top Hashtags",
sliderInput("seleco", label = tags$span(style="color: white;","How many Hashtags do you want to see?"), min = 1, max = 30, value = 10),
withSpinner(plotlyOutput("plot2",height = "auto", width = "100%"))
),
tabPanel("Top Posts",
tags$style("
.radio-inline label {
display: inline-block;
margin-right: 10px;
}
"),
fluidRow(
column(width = 6,
radioButtons("five", label = tags$span(style="color: white;","Choose your sort:"),
choices = c("Top 3","Bottom 3"),
selected = "Top 3", inline = TRUE)),
column(width = 6,
selectInput("engsen", label = tags$span(style="color: white;","Select your Metric:"),
choices = c("Engagement Rate", "Sentiment Score")))
),
fluidRow(
withSpinner(plotOutput("top1")),
column(12,align = "center",withSpinner(htmlOutput("ttop1"))),
withSpinner(plotOutput("top2")),
column(12,align = "center",withSpinner(htmlOutput("ttop2"))),
withSpinner(plotOutput("top3")),
column(12,align = "center",withSpinner(htmlOutput("ttop3"))),
class = "shiny-box"
)
),
tabPanel("Analysis on date and time",
fluidRow(
column(width = 6,
radioButtons("dateanalysis", label = tags$span(style="color: white;","Choose your sort:"),
choices = c("Day of the Week","Hour of the Day","Overall"),
selected = "Day of the Week", inline = TRUE))),
tags$div(
id = "center-container",
style = "display: flex; justify-content: center; align-items: center;",
withSpinner(plotlyOutput("day"))
),
fluidRow(
column(width = 4,
withSpinner(valueBoxOutput("day1")),
withSpinner(valueBoxOutput("hour1")),)
)
),
tabPanel("Overall Summary",
fluidRow(
column(width = 3, withSpinner(plotlyOutput("eng", height = "150px"))),
column(width = 3, withSpinner(plotlyOutput("sen", height = "150px"))),
column(width = 3, withSpinner(plotlyOutput("lr", height = "150px"))),
column(width = 3, withSpinner(plotlyOutput("cr", height = "150px")))
),
fluidRow(
column(width = 4, withSpinner(valueBoxOutput("progressBox", width = 3)),
withSpinner(valueBoxOutput("progressBox3", width = 3)),
withSpinner(valueBoxOutput("progressBox1", width = 3)),
withSpinner(valueBoxOutput("progressBox2", width = 3))
)
),
withSpinner(htmlOutput("output"))
)
)
)
)
)
)
)
runApp()
runApp()
runApp()
View(Post_info_summary_both)
View(Post_info_summary)
# Load required packages
library(tidyverse)
library(lubridate)
library(plotly)
# Convert date column to datetime format
Post_info$date_list <- ymd_hms(Post_info$date_list)
# Create new columns for day of week and hour of day
Post_info$day_of_week <- weekdays(Post_info$date_list)
Post_info$hour_of_day <- hour(Post_info$date_list)
# Group data by day of week and calculate mean engagement rate
Post_info_summary_day <- Post_info %>%
group_by(day_of_week) %>%
summarize(mean_engagement_rate = mean(Engagement_Rate))
# Find the day of week with the highest engagement rate
best_day <- Post_info_summary_day %>%
slice_max(mean_engagement_rate) %>%
pull(day_of_week)
# Create a plot of engagement rate by day of week
plot_day <- ggplot(Post_info_summary_day, aes(x = day_of_week, y = mean_engagement_rate)) +
geom_bar(stat = "identity", fill = "steelblue") +
labs(title = "Engagement Rate by Day of Week",
x = "Day of Week",
y = "Engagement Rate")
# Group data by hour of day and calculate mean engagement rate
Post_info_summary_hour <- Post_info %>%
group_by(hour_of_day) %>%
summarize(mean_engagement_rate = mean(Engagement_Rate))
# Find the hour of day with the highest engagement rate
best_hour <- Post_info_summary_hour %>%
slice_max(mean_engagement_rate) %>%
pull(hour_of_day)
# Create a plot of engagement rate by hour of day
plot_hour <- ggplot(Post_info_summary_hour, aes(x = hour_of_day, y = mean_engagement_rate)) +
geom_line(color = "steelblue") +
labs(title = "Engagement Rate by Hour of Day",
x = "Hour of Day",
y = "Engagement Rate")
# Group data by day of week and hour of day, and calculate mean engagement rate
Post_info_summary_both <- Post_info %>%
group_by(day_of_week, hour_of_day) %>%
summarize(mean_engagement_rate = mean(Engagement_Rate))
# Find the day of week and hour of day with the highest engagement rate
best_day_hour <- Post_info_summary_both %>%
slice_max(mean_engagement_rate) %>%
summarize(day_of_week = first(day_of_week),
hour_of_day = first(hour_of_day),
mean_engagement_rate = first(mean_engagement_rate))
# Create a plot of engagement rate by day of week and hour of day
plot_both <- plot_ly(Post_info_summary_both, x = ~hour_of_day, y = ~day_of_week, z = ~mean_engagement_rate,
type = "heatmap", colors = "Blues",
colorbar = list(title = "Engagement Rate")) %>%
layout(title = "Engagement Rate by Day of Week and Hour of Day",
xaxis = list(title = "Hour of Day"),
yaxis = list(title = "Day of Week"))
# Print findings
cat("The best day of the week to post on Instagram is", best_day, "\n")
cat("The best time of the week to post on Instagram is", best_hour, ":00\n")
cat("The best day and time of the week to post on Instagram is", head(best_day_hour[order(-best_day_hour$mean_engagement_rate),]$day_of_week, 1), "at", head(best_day_hour[order(-best_day_hour$mean_engagement_rate),]$hour_of_day, 1), ":00\n")
# Print plots
print(plot_day)
print(plot_hour)
print(plot_both)
View(Post_info_summary_both)
View(best_day_hour)
runApp()
runApp()
runApp()
runApp()
ui <- dashboardPage(skin = "black",
dashboardHeader(title = "InstaAnalytica"),
## Sidebar content
dashboardSidebar(
collapsed = TRUE,
sidebarMenu(id = "tabs",
menuItem("Username", tabName = "username", icon = icon("user")),
menuItem("Dashboard", tabName = "dashboard", icon = icon("dashboard"))
)
),
## Body content
dashboardBody(useWaitress(color = "#C13584"),
tags$head(    tags$style(HTML("
.col-sm-4 { width: 100%;}
.col-sm-8 { width: 100%;}
")),
tags$style(HTML("
/* Change the font color of the tabPanel */
.nav-tabs > li > a {
color: white;
}
")),
tags$style("
.shiny-box {
overflow: auto;
max-height: calc(70vh - 100px);
}
"),
tags$style("
.shiny-box1 {
overflow-y: auto;
max-height: calc(80vh - 100px);
}
")
),
setBackgroundImage(
src = "https://lotofcolor.com/wp-content/uploads/2020/11/thumbnail-3.png",
shinydashboard = TRUE
),
tabItems(
# First tab content
tabItem(
tabName = "username",
div(
fluidRow(
column(12, align = "center",
withSpinner(plotOutput("logo")),
title = "Inputs", background = "black",
textInput("text", "Enter the Username:"),
actionButton("submit_name", "Analyze"),
useShinyalert(), # Enable shinyalert library
)),
style = "display: flex; justify-content: center; align-items: center; height: 80vh; color:white;"
)
),
tabItem(tabName = "dashboard",
mainPanel(
tabsetPanel(
id = "tabset1",
tabPanel(title = "Profile Trends",
selectInput("chart", label = tags$span(style="color: white;","Select your chart:"),
choices = c("Area Chart", "Line Chart")),
withSpinner(plotlyOutput("plot"))),
tabPanel(title = "WordCloud",
tags$div(
id = "center-container",
style = "display: flex; justify-content: center; align-items: center;",
withSpinner(htmlOutput("wordcloud"))
),
withSpinner(htmlOutput("wordtext"))
),
tabPanel("Top Hashtags",
sliderInput("seleco", label = tags$span(style="color: white;","How many Hashtags do you want to see?"), min = 1, max = 30, value = 10),
withSpinner(plotlyOutput("plot2",height = "auto", width = "100%"))
),
tabPanel("Top Posts",
tags$style("
.radio-inline label {
display: inline-block;
margin-right: 10px;
}
"),
fluidRow(
column(width = 6,
radioButtons("five", label = tags$span(style="color: white;","Choose your sort:"),
choices = c("Top 3","Bottom 3"),
selected = "Top 3", inline = TRUE)),
column(width = 6,
selectInput("engsen", label = tags$span(style="color: white;","Select your Metric:"),
choices = c("Engagement Rate", "Sentiment Score")))
),
fluidRow(
withSpinner(plotOutput("top1")),
column(12,align = "center",withSpinner(htmlOutput("ttop1"))),
withSpinner(plotOutput("top2")),
column(12,align = "center",withSpinner(htmlOutput("ttop2"))),
withSpinner(plotOutput("top3")),
column(12,align = "center",withSpinner(htmlOutput("ttop3"))),
class = "shiny-box"
)
),
tabPanel("Analysis on date and time",
fluidRow(
column(width = 6,
radioButtons("dateanalysis", label = tags$span(style="color: white;","Choose your sort:"),
choices = c("Day of the Week","Hour of the Day","Overall"),
selected = "Day of the Week", inline = TRUE))),
tags$div(
id = "center-container",
style = "display: flex; justify-content: center; align-items: center;",
withSpinner(plotlyOutput("day"))
),
fluidRow(
column(width = 4,
withSpinner(valueBoxOutput("day1",width = 3)),
withSpinner(valueBoxOutput("hour1",width = 3)))
)
),
tabPanel("Overall Summary",
fluidRow(
column(width = 3, withSpinner(plotlyOutput("eng", height = "150px"))),
column(width = 3, withSpinner(plotlyOutput("sen", height = "150px"))),
column(width = 3, withSpinner(plotlyOutput("lr", height = "150px"))),
column(width = 3, withSpinner(plotlyOutput("cr", height = "150px")))
),
fluidRow(
column(width = 4, withSpinner(valueBoxOutput("progressBox", width = 3)),
withSpinner(valueBoxOutput("progressBox3", width = 3)),
withSpinner(valueBoxOutput("progressBox1", width = 3)),
withSpinner(valueBoxOutput("progressBox2", width = 3))
)
),
withSpinner(htmlOutput("output"))
)
)
)
)
)
)
)
runApp()
runApp()
shiny::runApp()
knitr::opts_chunk$set(echo = TRUE)
plt <- ggplot(Post_info_summary_hour, aes(x = hour_of_day, y = mean_engagement_rate)) +
geom_line(color = "#e763fa",alpha = 0.8) +
labs(title = "Engagement Rate by Hour of Day",
x = "Hour of Day",
y = "Engagement Rate")
ggplotly(plt) %>%
layout(xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
plot_bgcolor = "black",
paper_bgcolor = "black",
font = list(color = '#e763fa'))
plt <- ggplot(Post_info_summary_hour, aes(x = hour_of_day, y = mean_engagement_rate)) +
geom_line(color = "#e763fa",alpha = 0.8) +
labs(title = "Engagement Rate by Hour of Day",
x = "Hour of Day",
y = "Engagement Rate")
ggplotly(plt) %>%
layout(xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
plot_bgcolor = "black",
paper_bgcolor = "transparent",
font = list(color = '#e763fa'))
plt <- ggplot(Post_info_summary_hour, aes(x = hour_of_day, y = mean_engagement_rate)) +
geom_line(color = "#e763fa",alpha = 0.8) +
labs(title = "Engagement Rate by Hour of Day",
x = "Hour of Day",
y = "Engagement Rate")
ggplotly(plt) %>%
layout(xaxis = list(showgrid = FALSE),
yaxis = list(showgrid = FALSE),
plot_bgcolor = "black",
paper_bgcolor = "transparent",
font = list(color = '#e763fa')) %>%
update_traces(dict(marker_line_width=0))
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
install.packages("instaloader")
library(reticulate)
use_python("3.9")
py_config()
py_config()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
shiny::runApp()
View(Post_info)
knitr::opts_chunk$set(echo = TRUE)
raw_text <- c()
for (values in Post_info$hashtags_list){
raw_text <- append(values,raw_text)
}
# Example text
text <- c()
for (i in Post_info$Caption_list){
text <- append(values,raw_text)
}
# Convert the text to a corpus object
corpus <- Corpus(VectorSource(text))
# Perform some text preprocessing
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Create a term-document matrix
tdm <- TermDocumentMatrix(corpus)
# Convert the term-document matrix to a data frame
m <- as.data.frame(as.matrix(tdm))
m$frequency <- (rowSums(m[1:nrow(m),1:ncol(m)]))
raw_text_df <- data.frame(word = tdm$dimnames[[1]],frequency = m$frequency)
View(raw_text_df)
raw_text <- c()
for (values in Post_info$hashtags_list){
raw_text <- append(values,raw_text)
}
# Example text
text <- c()
for (i in Post_info$Caption_list){
text <- append(i,text)
}
# Convert the text to a corpus object
corpus <- Corpus(VectorSource(text))
# Perform some text preprocessing
corpus <- tm_map(corpus, content_transformer(tolower))
corpus <- tm_map(corpus, removePunctuation)
corpus <- tm_map(corpus, removeNumbers)
corpus <- tm_map(corpus, removeWords, stopwords("english"))
# Create a term-document matrix
tdm <- TermDocumentMatrix(corpus)
# Convert the term-document matrix to a data frame
m <- as.data.frame(as.matrix(tdm))
m$frequency <- (rowSums(m[1:nrow(m),1:ncol(m)]))
raw_text_df <- data.frame(word = tdm$dimnames[[1]],frequency = m$frequency)
View(raw_text_df)
runApp()
library(plotly)
fig <- plot_ly(Post_info, x = ~date, y = ~likecomment, type = 'scatter',mode = 'markers',fill = 'tozeroy', name = 'Likes', marker = list(color = 'white'),line = list(color = "white")) %>%   layout(
xaxis = list(
rangeselector = list(
buttons = list(
list(count = 7, label = "1w", step = "day", stepmode = "backward"),
list(count = 1, label = "1m", step = "month", stepmode = "backward"),
list(count = 3, label = "3m", step = "month", stepmode = "backward"),
list(count = 6, label = "6m", step = "month", stepmode = "backward"),
list(count = 1, label = "1y", step = "year", stepmode = "backward"),
list(step = "all")
)
),
rangeslider = list()
)
)
fig
View(Post_info)
head(Post_info[order(-Post_info$Engagement_Rate),]$date,1)
head(Post_info[order(-Post_info$Engagement_Rate),]$Engagement_Rate,1)
diff(Post_info$Engagement_Rate)
length(diff(Post_info$Engagement_Rate))
diff((Post_info$Engagement_Rate))[length(diff(Post_info$Engagement_Rate))]
mean(Post_info$Engagement_Rate)
past_six_months <- Sys.Date() - months(6)
trend_diff <- diff(Post_info[Post_info$Date >= past_six_months, ])
past_six_months <- Sys.Date() - months(6)
trend_diff <- diff(Post_info[Post_info$date >= past_six_months, ])
diff(Post_info[Post_info$date >= past_six_months, ])
past_six_months <- Sys.Date() - months(6)
trend_diff <- diff(Post_info[Post_info$date >= past_six_months, ]$Engagement_Rate)
trend_diff[length(trend_diff)]
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
View(Post_info_summary_hour)
View(Post_info_summary_day)
View(Post_info_summary_both)
View(Post_info_summary_both)
head(Post_info_summary_hour[-order(Post_info$mean_engagement_rate),]$hour,1)
head(Post_info_summary_hour[-order(Post_info$mean_engagement_rate),]$hour_of_day,1)
head(Post_info_summary_hour[-order(Post_info$mean_engagement_rate),]$hour_of_day)
head(Post_info_summary_hour[-order(Post_info$mean_engagement_rate),]$hour_of_day)
head(Post_info_summary_hour[-order(Post_info_summary_hour$mean_engagement_rate),]$hour_of_day,1)
order(Post_info_summary_hour$mean_engagement_rate)
-order(Post_info_summary_hour$mean_engagement_rate)
[-order(Post_info_summary_hour$mean_engagement_rate)]
Post_info_summary_hour[-order(Post_info_summary_hour$mean_engagement_rate)]
Post_info_summary_hour[-order(Post_info_summary_hour$mean_engagement_rate),]
Post_info_summary_hour[-order(Post_info_summary_hour$mean_engagement_rate),]$hour_of_day
head(Post_info[order(Post_info$Engagement_Rate),]$date,1)
Post_info_summary_hour
Post_info_summary_hour[-order(Post_info_summary_hour$mean_engagement_rate),]$hour_of_day
Post_info_summary_hour[order(Post_info_summary_hour$mean_engagement_rate),]$hour_of_day
Post_info_summary_hour[-order(Post_info_summary_hour$mean_engagement_rate),]$hour_of_day
Post_info_summary_hour[order(-Post_info_summary_hour$mean_engagement_rate),]$hour_of_day
head(Post_info_summary_hour[order(-Post_info_summary_hour$mean_engagement_rate),]$hour_of_day,1)
runApp()
runApp()
runApp()
runApp()
shiny::runApp()
runApp()
runApp()
runApp()
